This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<directory_structure>
lua/
  config/
    lazy.lua
  core/
    keymaps.lua
    options.lua
  plugins/
    lsp/
      lspconfig.lua
      mason.lua
    alpha.lua
    autopair.lua
    blink-cmp.lua
    colorscheme.lua
    copilot.lua
    hardtime.lua
    harpoon.lua
    hlchunk.lua
    indent-blackline.lua
    lualine.lua
    luasnip.lua
    maple.lua
    markview.lua
    mini-icons.lua
    neotree.lua
    noice.lua
    snacks.lua
    surround.lua
    telescope.lua
    tiny-inline-diagnostic.lua
    todo-comments.lua
    treesitter.lua
    typer.lua
    vim-tmux-navigator.lua
    which-key.lua
plugin/
  bool-switch.lua
  floating-terminal.lua
  tabout.lua
snippets/
  global.lua
  lua.lua
  python.lua
  react.lua
init.lua
lazy-lock.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="lua/config/lazy.lua">
-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    -- import your plugins
    { import = "plugins" },
    { import = "plugins.lsp" },
  },
  -- Configure any other settings here. See the documentation for more details.
  -- colorscheme that will be used when installing plugins.
  install = { colorscheme = { "habamax" } },
  -- automatically check for plugin updates
  checker = { enabled = true },
})
</file>

<file path="lua/core/keymaps.lua">
vim.g.mapleader = " "

local keymap = vim.keymap.set

keymap("n", "<leader>nh", function()
  require("snacks").notifier.show_history()
end, { desc = "Show Notification History" })

keymap("n", "<leader>wq", ":wqa<CR>") -- save and quit
keymap("n", "<leader>qq", ":qa!<CR>") -- quit without saving
keymap("n", "<leader>ww", ":wa<CR>")  -- save

-- Basic keymaps
keymap("n", "<Esc>", "<cmd>nohlsearch<CR>")
keymap("i", "jj", "<Esc>", { noremap = true, silent = true })
keymap("i", "JJ", "<Esc>", { noremap = true, silent = true })
keymap({ "o", "n", "v" }, "H", "^")
keymap({ "o", "n", "v" }, "L", "$")
keymap("n", "<CR>", "o<Esc>k", { noremap = true, silent = true })
keymap("n", "<leader>o", "O<Esc>j", { noremap = true, silent = true })

keymap("n", "<leader>fa", function()
  vim.lsp.buf.format()
end, { noremap = true, silent = true })

keymap("n", "<leader>x", function()
  vim.cmd "luafile %"
end, { noremap = true, silent = true })

-- Shortcut to use blackhole register by default
keymap("v", "c", '"_c', { noremap = true, silent = true })
keymap("n", "c", '"_c', { noremap = true, silent = true })

-- Add vertical mouvement to jumps
keymap("n", "j", [[v:count ? (v:count >= 3 ? "m'" . v:count : '') . 'j' : 'gj']], { noremap = true, expr = true })
keymap("n", "k", [[v:count ? (v:count >= 3 ? "m'" . v:count : '') . 'k' : 'gk']], { noremap = true, expr = true })

keymap("n", "<leader>ya", function()
  local save_cursor = vim.fn.getpos "."
  vim.cmd 'normal! ggVG"+y'
  vim.fn.setpos(".", save_cursor)
end, { noremap = true, silent = true })

keymap("n", "<leader>ca", function()
  vim.api.nvim_buf_set_lines(0, 0, -1, false, {})
  vim.cmd "startinsert"
end, { noremap = true, silent = true, desc = "Clear all lines and start insert mode" })

keymap("n", "dab", function()
  vim.cmd "normal! V%d"
end, { noremap = true, silent = true,  desc = "Delete all brackets" })

-- Yanking keymap to save cursor position
local cursorPreYank
vim.keymap.set({ "n", "x" }, "y", function()
  cursorPreYank = vim.api.nvim_win_get_cursor(0)
  return "y"
end, { expr = true })

keymap("n", "Y", function()
  cursorPreYank = vim.api.nvim_win_get_cursor(0)
  return "y$"
end, { expr = true })

vim.api.nvim_create_autocmd("TextYankPost", {
  callback = function()
    if vim.v.event.operator == "y" and cursorPreYank then
      vim.api.nvim_win_set_cursor(0, cursorPreYank)
      cursorPreYank = nil -- Clear the saved position after restoring it
    end
  end,
})

local open_split_view = function()
  require("telescope.builtin").find_files {
    attach_mappings = function(prompt_bufnr, map)
      require("telescope.actions").select_default:replace(function()
        require("telescope.actions").close(prompt_bufnr)
        local selection = require("telescope.actions.state").get_selected_entry()
        if selection then
          vim.cmd("vsplit " .. selection.path)
        end
      end)
      return true
    end,
  }
end

keymap("n", "<leader>vs", open_split_view, { desc = "Open split view" }) -- Open split view with telescope
</file>

<file path="lua/core/options.lua">
vim.cmd "let g:netrw_liststyle = 3"

local opt = vim.opt

-- Session Management
opt.sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,localoptions"

-- Line Numbers
opt.relativenumber = true
opt.number = true

-- Tabs & Indentation
opt.tabstop = 2
opt.shiftwidth = 2
opt.expandtab = true
opt.autoindent = true
vim.bo.softtabstop = 2

-- Line Wrapping
opt.wrap = false

-- Search Settings
opt.ignorecase = true
opt.smartcase = true

-- Cursor Line
opt.cursorline = true

-- Appearance
opt.termguicolors = true
opt.background = "dark"
opt.signcolumn = "yes"
vim.diagnostic.config {
  float = { border = "rounded" }, -- add border to diagnostic popups
}

-- Backspace
opt.backspace = "indent,eol,start"

-- Clipboard
opt.clipboard:append "unnamedplus"

-- Persistent Undo
opt.undofile = true

-- Split Windows
opt.splitright = true
opt.splitbelow = true

-- Consider - as part of keyword
opt.iskeyword:append "-"

-- Folding
opt.foldlevel = 20
opt.foldmethod = "expr"
opt.foldexpr = "nvim_treesitter#foldexpr()" -- Utilize Treesitter folds

opt.conceallevel = 2

-- Highlight when yanking (copying) text
vim.api.nvim_create_autocmd("TextYankPost", {
  desc = "Highlight when yanking (copying) text",
  group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
  callback = function()
    vim.highlight.on_yank()
  end,
})
</file>

<file path="lua/plugins/lsp/lspconfig.lua">
return {
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      'saghen/blink.cmp',
      {
        "folke/lazydev.nvim",
        ft = "lua", -- only load on lua files
        opts = {
          library = {
            -- See the configuration section for more details
            -- Load luvit types when the `vim.uv` word is found
            { path = "${3rd}/luv/library", words = { "vim%.uv" } },
            -- Add these to match your current config
            { path = vim.env.VIMRUNTIME },
            { path = "${3rd}/busted/library" },
          },
          -- Pass your existing lua_ls settings to lazydev
          settings = {
            Lua = {
              runtime = {
                version = 'LuaJIT',
              },
              workspace = {
                checkThirdParty = false,
              }
            }
          },
        },
      },
    },
    config = function()
      local keymap = vim.keymap

      vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(ev)
          -- Buffer local mappings.
          -- See `:help vim.lsp.*` for documentation on any of the below functions
          local opts = { buffer = ev.buf, silent = true }

          -- set keybinds
          opts.desc = "Go to declaration"
          keymap.set("n", "gD", vim.lsp.buf.declaration, opts) -- go to declaration

          opts.desc = "Go to definition"
          keymap.set("n", "gd", vim.lsp.buf.definition, opts) -- go to definition

          opts.desc = "Smart rename"
          keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- smart rename

          opts.desc = "Show line diagnostics"
          keymap.set("n", "<leader>k", vim.diagnostic.open_float, opts) -- show diagnostics for line

          opts.desc = "Show documentation for what is under cursor"
          keymap.set("n", "K", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor

          opts.desc = "Restart LSP"
          keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts) -- mapping to restart lsp if necessary
        end,
      })
    end,
  }
}
</file>

<file path="lua/plugins/lsp/mason.lua">
-- Mason setup for installing and managing LSP servers
return {
  "williamboman/mason.nvim",

  dependencies = {
    "williamboman/mason-lspconfig.nvim", -- Integrates Mason with LSPconfig
    "WhoIsSethDaniel/mason-tool-installer.nvim",
  },
  config = function()
    -- Mason setup
    require("mason").setup {
      ui = {
        icons = {
          package_installed = "✓",
          package_pending = "➜",
          package_uninstalled = "✗",
        },
      },
    }

    -- Mason LSPconfig setup for managing LSP servers
    require("mason-lspconfig").setup {
      ensure_installed = {
        "lua_ls",
        "ts_ls",
        "html",
        "cssls",
        "tailwindcss",
        "svelte",
        "graphql",
        "prismals",
        "pyright",
        "terraformls",
      },
    }

    require("mason-tool-installer").setup {
      ensure_installed = {
        -- "prettier", -- prettier formatter
        -- "stylua", -- lua formatter
        -- "isort", -- python formatter
        -- "black", -- python formatter
        -- "eslint_d",
        -- "pylint",
        -- "tflint",
      },
    }
  end,
}
</file>

<file path="lua/plugins/alpha.lua">
return {
  "goolord/alpha-nvim",
  event = "VimEnter",
  config = function()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.dashboard")


    local neovim = {
      "                                                     ",
      "     ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ",
      "     ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ",
      "     ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ",
      "     ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
      "     ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
      "     ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
         "                                                     ",
    }

    -- Define multiple headers
    local headers = {
      {
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣿⣿⠿⠿⠿⠷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢰⠲⣤⣼⣿⣿⠋⠀⠀⠀⠀⠀⠈⢳⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⣾⢱⣌⣻⣿⣿⠀⢠⡶⡄⠀⢀⣤⣈⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠸⣄⠀⠙⢻⣿⠀⠈⠛⠁⠰⠂⠛⢹⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠘⠢⢤⠿⣿⣦⡀⠈⠛⠿⠗⢂⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣩⣿⣿⣷⣶⣶⣶⣏⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀",
          "⢀⣠⣤⣤⣾⣿⣿⣿⢹⣿⣿⡿⠛⠛⠛⠛⠿⠿⠿⣿⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀",
          "⢿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡟⢿⣿⣿⣿⣿⣿⣶⡄",
          "⠈⠻⠟⠉⠀⠀⢀⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠈⠉⠙⠿⢿⣿⡷",
          "⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⠾⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⡿⠀⠙⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⠃⠀⠀⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢀⣤⣿⣿⣿⣿⣿⠇⠀⠀⠀⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⣾⣏⣿⣹⣿⣿⣿⠀⠀⠀⠀⠙⠻⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⢯⡽⣥⢯⣽⢿⣷⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠈⠑⠿⣿⣻⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
      },
      {
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠤⢄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠀⢀⣠⣶⣿⣿⠷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣦⣠⣶⣿⣿⣿⣿⣿⡦⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡏⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠸⢧⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡇⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣟⣛⣛⣿⣿⣯⣭⣛⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠤⣶⣦⣭⣉⣁⠀⠀⠀⣐⣒⣠⣤⣤⣭⣶⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠄⠒⣹⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠈⠁⠒⢢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠄⠀⠀⢀⡀⢠⣿⣿⠿⠛⠛⡉⢡⠈⣧⠐⢠⣿⠀⢸⡇⠀⠍⢉⠛⠿⢿⣿⡎⣀⣤⡀⡤⢐⣶⠚⢷⡀⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⠈⢿⡟⢸⣿⣷⡀⢋⡀⢧⠠⠐⢿⡇⢸⡇⢨⠘⠇⠄⠀⣿⠏⣰⣤⣿⣷⢻⣿⠁⠀⠀⠙⠷⠬⡇⠀⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠊⠁⠀⠀⠀⠀⠀⣸⣧⣿⣿⣿⣷⣈⣥⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣯⣄⣿⣿⣿⣿⣸⣿⠀⠀⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀⠀",
          "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⠟⠛⠛⠛⠛⠻⣿⣿⣿⣿⣿⣿⠛⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⢀⣀⣱⡄⠀⠀⠀",
          "⠀⠀⠀⠀⢀⠄⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣿⠏⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡿⠃⠀⠀⠀⢺⣿⣿⣿⣿⣿⣿⢿⣃⡦⠀⢀⣴⣿⣿⣿⣿⣿⣆⠀⠀",
          "⠀⠀⢀⠔⠁⠀⠀⠀⠀⠀⠀⣠⠴⠚⢩⡟⠁⠀⠀⣿⣿⣿⣀⣀⣠⠟⠀⠀⢀⣿⣿⡟⠁⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⡏⠘⢹⡇⠑⣸⣿⣿⣿⣿⣿⣿⣿⡆⠀",
          "⠀⢠⠋⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠈⠀⠀⠀⢠⣿⣿⣿⣿⣿⠋⠀⠀⣠⣿⣿⡋⠀⠀⠐⠃⠀⠀⠈⣿⣿⣿⣿⣿⠀⠀⢻⡇⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⡀",
          "⢀⠃⣀⡀⢀⠀⠀⠀⢀⣤⡶⠟⠁⠀⠀⠀⠀⠀⠸⣿⣿⣿⡿⠁⠀⢀⣾⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⠀⠀⠘⡇⠀⠀⠈⠹⣿⣿⣿⣿⣿⣿⡇",
          "⠘⣾⣯⣤⣾⣄⠀⠀⠿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠛⠀⠀⢸⣿⣿⣿⣿⡿⠃⠀⠀⠘⣿⣿⣿⣿⣿⠀⠀⠀⠃⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⠇",
          "⠀⠹⣾⣿⣿⣿⣆⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⡿⠀",
          "⠀⠀⠈⢦⠈⠙⣿⡆⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⢀⡆⠀⠀⣾⣿⣿⣿⣿⣿⣿⠃⠀",
          "⠀⠀⠀⠀⠱⡄⠑⠻⣴⠀⠀⠘⣧⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣾⠁⠀⠀⣿⣿⣿⣿⣿⣿⠃⠀⠀",
        },
      {
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠋⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠈⠉⠉⠙⠛⠛⠻⢿⣿⡿⠟⠁⠀⣀⣴⣿⣿⣿⣿⣿⠟",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⣉⣡⠀⣠⣴⣶⣶⣦⠄⣀⡀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⡿⢃⣾",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⣾⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣠⣾⡟⢡⣾⣿⣿⣿⡿⢋⣴⣿⡿⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⢡⣾⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠃⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣼⣿⡟⣰⣿⣿⣿⣿⠏⣰⣿⣿⠟⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢚⣛⢿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠸⣿⠟⢰⣿⣿⣿⣿⠃⣾⣿⣿⠏⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣾",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠻⠻⠃⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⢉⣴⣿⣿⣿⣿⡇⠘⣿⣿⠋⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡘⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⣿⣿⣿⣿⠁⢀⣀⠀⢀⣾⣿⣿⣿⣿⣿⣿⠟⠉⠉⠉⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣌",
        "⣿⣿⣿⣿⣿⣿⡿⠁⣀⣤⡀⠀⠈⠻⢿⠀⣼⣿⣷⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⠟⠛⠙⠃⠀⣿⣿⣿⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⡿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠁⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿",
        "⣿⠟⠁⢀⣴⣶⣶⣾⣿⣿⣿⣿⣶⡐⢦⣄⠀⠀⠈⠛⢿⣿⣿⣿⣿⡀⠀⠀⠀⠀⢀⣼⡿⢛⣩⣴⣶⣶⣶⣶⣶⣶⣭⣙⠻⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿",
        "⠁⠀⣴⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣦⡙⠻⣶⣄⡀⠀⠈⠙⢿⣿⣷⣦⣤⣤⣴⣿⡏⣠⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣌⠻⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⣿⠋⣠⠔⠀⠀⠻⣿⣿⣿⣿⢉⡳⢦⣉⠛⢷⣤⣀⠀⠈⠙⠿⣿⣿⣿⣿⢸⣿⡄⠻⣿⣿⠟⡈⣿⣿⣿⣿⣿⢉⣿⣧⢹⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⡇⠠⡇⠀⠀⠀⠀⣿⣿⣿⣿⢸⣿⣷⣤⣙⠢⢌⡛⠷⣤⣄⠀⠈⠙⠿⣿⣿⣿⣿⣷⣦⣴⣾⣿⣤⣙⣛⣛⣥⣾⣿⣿⡌⣿⣿⣿⣷⣤⣀⣀⣀⣠⣴⣿⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⣷⡀⠡⠀⠀⠀⣰⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣦⣌⡓⠤⣙⣿⣦⡄⠀⠈⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⣿⣿⣶⣤⣴⣾⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⣷⠀⣶⡄⠀⠈⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢃⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⣿⣿⣿⠟⠻⣿⣿⡏⣉⣭⣭⡘⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⡇⢸⡇⢠⡀⠈⠙⠋⠉⠉⠉⠉⠛⠫⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⠛⣿⣿⣀⣀⣾⡿⢀⣿⣿⣿⢻⣷⣦⢈⡙⠻⢿⣿⣿⣿⣿⣿⣿⣿⠀⣿⡇⢸⡇⢸⣿⠀⣦⠀⠀⠶⣶⣦⣀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⠀⢸⣿⣿⣦⣈⡛⠿⠟⣋⣤⣾⣿⣿⣿⣸⣿⣿⢸⡇⢰⡆⢈⡙⠻⢿⣿⣿⣿⠀⢿⡇⢸⡇⢸⣿⢠⣿⡇⣿⡆⢈⡙⠻⠧⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⠀⠀⣝⠛⢿⣿⣿⣿⣿⣿⣿⠟⣁⠀⠀⢈⠛⠿⢸⣇⢸⡇⢸⡇⣶⣦⣌⡙⠻⢄⡀⠁⠘⠇⠘⣿⢸⣿⡇⣿⡇⢸⡛⠷⣦⣄⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
      }
    }

    -- Randomly select a header
    math.randomseed(os.time())
    local selected_header = headers[math.random(#headers)]
    dashboard.section.header.val = selected_header

    -- Set menu buttons
    dashboard.section.buttons.val = {
      dashboard.button("Ctrl n", "  > Toggle file explorer", "<cmd>NvimTreeToggle<CR>"),
      dashboard.button("Leader ff", "󰱼 > Find File", "<cmd>Telescope find_files<CR>"),
      dashboard.button("Leader fw", "  > Find Word", "<cmd>Telescope live_grep<CR>"),
      dashboard.button("q", " > Quit NVIM", "<cmd>qa<CR>"),
    }

    -- Set up alpha with the customized dashboard
    alpha.setup(dashboard.opts)

    -- Disable folding in the alpha buffer
    vim.cmd([[autocmd FileType alpha setlocal nofoldenable]])
  end,
}
</file>

<file path="lua/plugins/autopair.lua">
return {
  'windwp/nvim-autopairs',
  event = { 'InsertEnter' },
  dependencies = {
    'hrsh7th/nvim-cmp',
  },
  config = function()
    -- Start by requiring the nvim-autopairs plugin
    local autopairs = require 'nvim-autopairs'

    -- Configure nvim-autopairs
    autopairs.setup {
      check_ts = true, -- Enable Tree-sitter integration for smarter pairing
      ts_config = { -- Tree-sitter configuration for specific languages
        lua = { 'string' }, -- Disable pairs in Lua strings
        javascript = { 'template_string' }, -- Disable pairs in JavaScript template literals
        java = false, -- Disable Tree-sitter checks for Java
      },
    }

    -- Integrate nvim-autopairs with nvim-cmp (completion plugin)
    local cmp_autopairs = require 'nvim-autopairs.completion.cmp'
    local cmp = require 'cmp'

    cmp.event:on(
      'confirm_done',
      cmp_autopairs.on_confirm_done() -- Automatically insert pairs on completion confirm
    )
  end,
}
</file>

<file path="lua/plugins/blink-cmp.lua">
return {
  'saghen/blink.cmp',
  -- optional: provides snippets for the snippet source
  version = '1.*',
  opts = {
    keymap = {
      preset = 'none' ,
      ['<C-k>'] = { 'select_prev', 'fallback' },
      ['<C-j>'] = { 'select_next', 'fallback' },
      ['<C-e>'] = { 'hide', 'fallback' },
      ['<C-y>'] = { 'select_and_accept' },
      ['<CR>'] = { 'select_and_accept', 'fallback'},
    },

    appearance = {
      nerd_font_variant = 'mono',
    },

    snippets = { preset = 'luasnip' },

    -- (Default) Only show the documentation popup when manually triggered
    completion = { 
      list = {
        selection = {
          preselect = false,   -- Automatically select the first item
        }
      },
       accept = {
        -- experimental auto-brackets support
        auto_brackets = {
          enabled = true,
        },
      },
      menu = {
        draw = {
          treesitter = { "lsp" },
          columns = { 
            { 'kind_icon' }, 
            { 'label', 'label_description', gap = 1 },
            { 'source_name' }  -- This will show the source of completions
          },
        },
      },
      documentation = { 
        auto_show = true,
        auto_show_delay_ms = 200,
      },
      ghost_text = {
        enabled = true,
      },
    },

    -- Default list of enabled providers defined so that you can extend it
    -- elsewhere in your config, without redefining it, due to `opts_extend`
    sources = {
      default = { 'lsp', 'path', 'snippets', 'buffer' },
    },

    -- (Default) Rust fuzzy matcher for typo resistance and significantly better performance
    -- You may use a lua implementation instead by using `implementation = "lua"` or fallback to the lua implementation,
    -- when the Rust fuzzy matcher is not available, by using `implementation = "prefer_rust"`
    --
    -- See the fuzzy documentation for more information
    fuzzy = {
      implementation = "prefer_rust",
      prebuilt_binaries = { download = true },
    }
  },
  opts_extend = { "sources.default" },
  config = function(_, opts)
    require("blink.cmp").setup(opts)
    
    -- Add this custom mapping for Enter key
    vim.keymap.set("i", "<CR>", function()
      local cmp = require("blink.cmp")
      if cmp.snippet_active() then
        return cmp.select_and_accept()
      else
        return "<CR>"
      end
    end, { expr = true, noremap = true, replace_keycodes = true })
    
    -- Your existing mapping
    vim.keymap.set("i", "<C-j>", function()
      local cmp = require("blink.cmp")
      if cmp.snippet_active() then
        return ""
      else
        return "<C-j>"
      end
    end, { expr = true, noremap = true })
  end,
}
</file>

<file path="lua/plugins/colorscheme.lua">
return {
  "neanias/everforest-nvim",
  version = false,
  lazy = false,
  priority = 1000,
  config = function()
    vim.o.background = "dark" -- MUST be set before applying the colorscheme
    require("everforest").setup ({
      background = "medium", -- Optional; you can also set other options here
      show_eob = false,
    })
    vim.cmd "colorscheme everforest"
  end,
}
</file>

<file path="lua/plugins/copilot.lua">
return {
  {
    "zbirenbaum/copilot.lua",
    cmd = "Copilot",
    event = "InsertEnter",
    config = function()
      require("copilot").setup({
        suggestion = { enabled = true, auto_trigger = true , keymap = {
          accept = "jk",
        }},
        panel = { enabled = false },
      })
    end,
  },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    branch = "main",
    dependencies = {
      { "zbirenbaum/copilot.lua" },
      { "nvim-lua/plenary.nvim" }, -- for curl, log wrapper
      { "nvim-telescope/telescope.nvim" },
    },
    event = "VeryLazy",
    keys = {
      {
        "<leader>cpp",
        function()
          local actions = require "CopilotChat.actions"
          require("CopilotChat.integrations.telescope").pick(
            actions.prompt_actions { selection = require("CopilotChat.select").visual }
          )
        end,
        mode = { "n", "v" },
        desc = "Prompt actions",
      },
      {
        "<C-p>",
        function()
          require("CopilotChat").toggle()
        end,
        mode = "n",
        desc = "Open Copilot chat",
      },
      {
        "<leader>cpa",
        function()
          local input = vim.fn.input "What's the question"
          if input ~= "" then
            require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
          end
        end,
        desc = "Copilot Quick Chat",
      },
      window = {
        layout = "float",
        width = 0.4,
        height = 0.4,
        border = "rounded",
      },
    },

    config = function(_, opts)
      local chat = require "CopilotChat"
      local select = require "CopilotChat.select"
      vim.g.copilot_no_tab_map = true

      vim.api.nvim_create_autocmd("BufEnter", {
        callback = function()
          -- Detect the project root using .git or fallback to the current directory
          local root = vim.fn.finddir(".git/..", vim.fn.expand "%:p:h" .. ";")
          if root == "" then
            root = vim.fn.expand "%:p:h" -- Fallback to the directory of the current file
          end
          vim.g.copilot_workspace_folders = { root }
        end,
      })

      chat.setup(vim.tbl_deep_extend("force", opts, {
        prompts = {
          DiagnosticError = {
            selection = select.visual,
            prompt = "This line of code has an error, based on the file and the message, fix the error. If the fix is a quick fix please provid the missing character",
            description = "Fix diagnostic error",
            context = "file",
          },
          InDepthDiagnostic = {
            selection = select.visual,
            prompt = "This line of code has an error, I need you to explain the error. I don't want you to just fix it, explain the error in depth and how the solution solves the issue",
            description = "Fix in depth diagnostic error",
            context = "file",
          },
          FixBloc = {
            selection = select.visual,
            prompt = "This block of code has an error, fix the error and give me back only the fixed block without line Expression so that I can directly replace it in the file",
            description = "Fix block error",
            context = "file",
          },
          FeatureRequest = {
            selection = select.visual,
            prompt = "I need you to implement a feature. You will give back the code unchanged other than what is needed to implement the feature. No line Expression, just the code so that I can directly replace it in the file",
            description = "Implement feature",
            context = "file",
          },
        },
        mappings = {
          reset = {
            normal = "<C-r>",
          },
        },
        -- window = {
        --   layout = "float",
        --   width = 1,
        --   height = 0.4,
        -- },
      }))
    end,
  },

  vim.keymap.set("i", "jk", 'copilot#Accept("\\<CR>")', {
    expr = true,
    replace_keycodes = false,
  })
}
</file>

<file path="lua/plugins/hardtime.lua">
return {
   "m4xshen/hardtime.nvim",
   lazy = false,
   dependencies = { "MunifTanjim/nui.nvim" },
   opts = {
    disable_mouse = false
  },
}
</file>

<file path="lua/plugins/harpoon.lua">
return {
  "ThePrimeagen/harpoon",
  branch = "harpoon2",
  opts = {
    menu = {
      width = vim.api.nvim_win_get_width(0) - 4,
    },
    settings = {
      save_on_toggle = true,
    },
  },
  keys = function()
    local keys = {
      {
        "<leader>H",
        function()
          require("harpoon"):list():add()
        end,
        desc = "Harpoon File",
      },
      {
        "<leader>h",
        function()
          local harpoon = require "harpoon"
          harpoon.ui:toggle_quick_menu(harpoon:list())
        end,
        desc = "Harpoon Quick Menu",
      },
    }

    for i = 1, 5 do
      table.insert(keys, {
        "<leader>" .. i,
        function()
          require("harpoon"):list():select(i)
        end,
        desc = "Harpoon to File " .. i,
      })
    end
    return keys
  end,
}
</file>

<file path="lua/plugins/hlchunk.lua">
return {
  "shellRaining/hlchunk.nvim",
  event = { "BufReadPre", "BufNewFile" },
  config = function()
    require("hlchunk").setup({
      chunk = {
        enable = true
        },
    })
  end
}
</file>

<file path="lua/plugins/indent-blackline.lua">
-- Indentation guides
return {
  -- https://github.com/lukas-reineke/indent-blankline.nvim
  "lukas-reineke/indent-blankline.nvim",
  event = 'VeryLazy',
  main = "ibl",
  opts = {
    enabled = true,
    indent = {
      char = '⋅',
    },
  },
}
</file>

<file path="lua/plugins/lualine.lua">
-- Status line
return {
  -- https://github.com/nvim-lualine/lualine.nvim
  'nvim-lualine/lualine.nvim',
  dependencies = {
    -- https://github.com/nvim-tree/nvim-web-devicons
    'nvim-tree/nvim-web-devicons', -- fancy icons
    -- https://github.com/linrongbin16/lsp-progress.nvim
    'linrongbin16/lsp-progress.nvim', -- LSP loading progress
  },
  opts = {
    options = {
      -- For more themes, see https://github.com/nvim-lualine/lualine.nvim/blob/master/THEMES.md
      theme = "codedark", -- "auto, tokyonight, catppuccin, codedark, nord" 
    },
    sections = {
      lualine_c = {
        {
          -- Customize the filename part of lualine to be parent/filename
          'filename',
          file_status = true,      -- Displays file status (readonly status, modified status)
          newfile_status = false,  -- Display new file status (new file means no write after created)
          path = 4,                -- 0: Just the filename
          symbols = {
            modified = '[+]',      -- Text to show when the file is modified.
            readonly = '[-]',      -- Text to show when the file is non-modifiable or readonly.
          }
        }
      }
    }
  }
}
</file>

<file path="lua/plugins/luasnip.lua">
return {
  "L3MON4D3/LuaSnip",
  dependencies = { "rafamadriz/friendly-snippets" },
  config = function()
    local ls = require "luasnip"

    ls.setup {
      enable_autosnippets = true,
      updateevents = "TextChanged,TextChangedI",
    }

    require("luasnip.loaders.from_lua").load { paths = "~/.config/nvim/snippets/" }

    vim.keymap.set({ "i", "n" }, "<C-k>", function()
      if ls.choice_active() then
        ls.change_choice(1)
      end
    end)

    vim.keymap.set({ "i", "n" }, "<C-j>", function()
      if ls.choice_active() then
        ls.change_choice(-1)
      end
    end)
  end,
}
</file>

<file path="lua/plugins/maple.lua">
return {
  "vivalareda/maple.nvim",
  config = function()
    require("maple").setup {
      relative_number = true,
      keymaps = {
        toggle = "<leader>m", -- Key to toggle Maple
        close = "q", -- Key to close the window
        switch_mode = "m", -- Key to switch between global and project view
      },
    }
  end,
}
</file>

<file path="lua/plugins/markview.lua">
return {
  "OXY2DEV/markview.nvim",
  lazy = false,
  config = function()
    local presets = require("markview.presets");

    require("markview").setup({
        markdown = {
            headings = presets.headings.glow
        }
    });
  end,
}
</file>

<file path="lua/plugins/mini-icons.lua">
return {
  "echasnovski/mini.icons",
  lazy = true,
  opts = {
    file = {
      [".keep"] = { glyph = "󰊢", hl = "MiniIconsGrey" },
      ["devcontainer.json"] = { glyph = "", hl = "MiniIconsAzure" },
    },
    filetype = {
      dotenv = { glyph = "", hl = "MiniIconsYellow" },
    },
  },
  init = function()
    package.preload["nvim-web-devicons"] = function()
      require("mini.icons").mock_nvim_web_devicons()
      return package.loaded["nvim-web-devicons"]
    end
  end,
}
</file>

<file path="lua/plugins/neotree.lua">
-- Neo-tree is a Neovim plugin to browse the file system
-- https://github.com/nvim-neo-tree/neo-tree.nvim

return {
  "nvim-neo-tree/neo-tree.nvim",
  version = "*",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
    "MunifTanjim/nui.nvim",
  },
  cmd = "Neotree",
  keys = {
    { "<C-n>", ":Neotree toggle<CR>", desc = "Toggle NeoTree", silent = true },
  },
  opts = {
    event_handlers = {
      {
        event = "file_open_requested",
        handler = function()
          -- Auto close Neo-tree when a file is opened
          require("neo-tree.command").execute { action = "close" }
        end,
      },
    },
    filesystem = {
      filtered_items = {
        hide_dotfiles = false, -- Show dotfiles
        hide_gitignored = false, -- Show files ignored by git
      },
      window = {
        mappings = {
          ["<CR>"] = "open", -- Press Enter to open files or folders
        },
      },
    },
    close_if_last_window = true,
  },
}
</file>

<file path="lua/plugins/noice.lua">
-- lazy.nvim
return {
  "folke/noice.nvim",
  event = "VeryLazy",
  opts = {
    -- add any options here
  },
  dependencies = {
    "MunifTanjim/nui.nvim",
    -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
  },

  config = function()
    local noice = require "noice"

    noice.setup {
      lsp = {
        -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
        override = {
          ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
          ["vim.lsp.util.stylize_markdown"] = true,
          ["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
        },
      },
      -- you can enable a preset for easier configuration
      presets = {
        bottom_search = true, -- use a classic bottom cmdline for search
        command_palette = false, -- position the cmdline and popupmenu together
        long_message_to_split = true, -- long messages will be sent to a split
        inc_rename = false, -- enables an input dialog for inc-rename.nvim
        lsp_doc_border = false, -- add a border to hover docs and signature help
      },
    }

    require("lualine").setup {
      sections = {
        lualine_x = {
          {
            require("noice").api.statusline.mode.get,
            cond = require("noice").api.statusline.mode.has,
            color = { fg = "#ff9e64" },
          },
        },
      },
    }
  end,
}
</file>

<file path="lua/plugins/snacks.lua">
return {
  "folke/snacks.nvim",
  priority = 1000,
  lazy = false,
  opts = {
    notifier = { enabled = true },
    picker = { enabled = true },
  }
}
</file>

<file path="lua/plugins/surround.lua">
return {
  "kylechui/nvim-surround",
  event = { "BufReadPre", "BufNewFile" },
  version = "*", -- Use for stability; omit to use `main` branch for the latest features
  config = true,
}
</file>

<file path="lua/plugins/telescope.lua">
return {
  "nvim-telescope/telescope.nvim",
  tag = "0.1.8", -- Use a stable release
  dependencies = {
    "nvim-lua/plenary.nvim",
    { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
    "nvim-tree/nvim-web-devicons",
    "debugloop/telescope-undo.nvim",
  },
  config = function()
    local telescope = require("telescope")
    local actions = require("telescope.actions")
    telescope.setup {
      extensions = {
        undo = {
          "debugloop/telescope-undo.nvim",
        },
      },
      defaults = {
        file_ignore_patterns = { "node_modules", "*flask-app/*" },
        mappings = {
          i = {
            ["<C-h>"] = "which_key",
            ["<C-j>"] = "move_selection_next",
            ["<C-k>"] = "move_selection_previous",
            ["<esc>"] = actions.close,
          }, -- Example mapping for insert mode
        },
      },
      pickers = {
        find_files = { theme = "dropdown" },
      },
    }

    telescope.load_extension "fzf"
    telescope.load_extension "undo"

    -- Telescope key mappings
    local builtin = require "telescope.builtin"
    vim.keymap.set("n", "<leader>fh", builtin.help_tags, { desc = "[S]earch [H]elp" })
    vim.keymap.set("n", "<leader>ff", builtin.find_files, { desc = "[S]earch [F]iles" })
    vim.keymap.set("n", "<leader>fw", builtin.live_grep, { desc = "[S]earch by [G]rep" })
    vim.keymap.set("n", "<leader>fb", builtin.buffers, { desc = "[ ] Find existing buffers" })
    vim.keymap.set("n", "<leader>fh", builtin.help_tags, { desc = "[S]earch [H]elp" })
    vim.keymap.set("n", "<leader>fcw", builtin.grep_string, { desc = "[S]earch current [W]ord" })
    vim.keymap.set("n", "<leader>fd", builtin.diagnostics, { desc = "[S]earch [D]iagnostics" })
    vim.keymap.set("n", "<leader>fr", builtin.resume, { desc = "[S]earch [R]esume" })
    vim.keymap.set("n", "<leader>f.", builtin.oldfiles, { desc = "[S]earch Recent Files ('repeat')" })
    vim.keymap.set("n", "<leader><leader>", builtin.buffers, { desc = "[ ] Find existing buffers" })

    -- Fuzzy search in current buffer
    vim.keymap.set("n", "<leader>/", function()
      builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown {
        winblend = 10,
        previewer = false,
      })
    end, { desc = "[/] Fuzzily search in current buffer" })

    -- Live Grep in Open Files
    vim.keymap.set("n", "<leader>s/", function()
      builtin.live_grep {
        grep_open_files = true,
        prompt_title = "Live Grep in Open Files",
      }
    end, { desc = "[S]earch [/] in Open Files" })

    -- Search Neovim configuration files
    vim.keymap.set("n", "<leader>fn", function()
      builtin.find_files { cwd = vim.fn.stdpath "config" }
    end, { desc = "[S]earch [N]eovim files" })

    vim.keymap.set("n", "<leader>fu", "<cmd>Telescope undo<cr>")
  end,
}
</file>

<file path="lua/plugins/tiny-inline-diagnostic.lua">
return {
  "rachartier/tiny-inline-diagnostic.nvim",
  event = "LspAttach", -- Or `LspAttach`
  priority = 1000, -- needs to be loaded in first
  config = function()
    require("tiny-inline-diagnostic").setup {
      preset = "powerline",
      overflow = {
        mode = "wrap",
      },
      multiple_diag_under_cursor = false,
      multilines = {
        enabled = true,
        always_show = false,
      },
    }
  end,
}
</file>

<file path="lua/plugins/todo-comments.lua">
return {
  "folke/todo-comments.nvim",
  dependencies = { "nvim-lua/plenary.nvim" },
  opts = {},
}
</file>

<file path="lua/plugins/treesitter.lua">
return {
  {
    "nvim-treesitter/nvim-treesitter",
    event = { "BufReadPre", "BufNewFile" },
    build = ":TSUpdate",
    dependencies = {
      "windwp/nvim-ts-autotag", -- Autotag dependency
      "nvim-treesitter/nvim-treesitter-textobjects",
    },
    config = function()
      require("nvim-treesitter.configs").setup {
        autotag = {
          enable = true
        },
        modules = {}, -- Placeholder to avoid warning
        ignore_install = {}, -- Empty table if you don't want to ignore any parsers
        ensure_installed = {
          "json",
          "javascript",
          "typescript",
          "tsx",
          "yaml",
          "html",
          "css",
          "prisma",
          "markdown",
          "markdown_inline",
          "svelte",
          "graphql",
          "bash",
          "lua",
          "vim",
          "dockerfile",
          "gitignore",
          "query",
          "vimdoc",
          "c",
        },
        sync_install = false, -- Install languages asynchronously
        auto_install = true, -- Automatically install missing parsers

        indent = { enable = true },
        highlight = {
          enable = true, -- Enable syntax highlighting
          use_languagetree = true,
        },
        incremental_selection = {
          enable = true,
          keymaps = {
            init_selection = "ss", -- Start incremental selection
            node_incremental = "es", -- Increment to the next node
            scope_incremental = "ef", -- Increment to the next scope (e.g., function or class)
            node_decremental = "ds", -- Decrement selection
          },
        },
        textobjects = {
          move = {
            enable = true,
            goto_next_start = {
              ["]f"] = "@function.outer",
              ["]c"] = "@class.outer",
              ["]a"] = "@parameter.inner"
            },
            goto_next_end = {
              ["]F"] = "@function.outer",
              ["]C"] = "@class.outer",
              ["]A"] = "@parameter.inner"
            },
            goto_previous_start = {
              ["[f"] = "@function.outer",
              ["[c"] = "@class.outer",
              ["[a"] = "@parameter.inner"
            },
            goto_previous_end = {
              ["[F"] = "@function.outer",
              ["[C"] = "@class.outer",
              ["[A"] = "@parameter.inner"
            },
          },
          swap = {
            enable = true,
            swap_next = {
              ["<leader>a"] = "@parameter.inner",
            },
            swap_previous = {
              ["<leader>A"] = "@parameter.inner",
            },
          },
        },
      }
    end,
  },
}
</file>

<file path="lua/plugins/typer.lua">
return {
  "nvzone/typr",
  dependencies = "nvzone/volt",
  opts = {},
  cmd = { "Typr", "TyprStats" },
}
</file>

<file path="lua/plugins/vim-tmux-navigator.lua">
return {
  "christoomey/vim-tmux-navigator",
  lazy = false,
  cmd = {
    "TmuxNavigateLeft",
    "TmuxNavigateDown",
    "TmuxNavigateUp",
    "TmuxNavigateRight",
    "TmuxNavigatePrevious",
  },
  keys = {
    { "<C-h>", "<cmd><C-U>TmuxNavigateLeft<cr>" },
    { "<C-j>", "<cmd><C-U>TmuxNavigateDown<cr>" },
    { "<C-k>", "<cmd><C-U>TmuxNavigateUp<cr>" },
    { "<C-l>", "<cmd><C-U>TmuxNavigateRight<cr>" },
    { "<C-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
  },
}
</file>

<file path="lua/plugins/which-key.lua">
return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      "<leader>?",
      function()
        require("which-key").show { global = false }
      end,
      desc = "Buffer Local Keymaps (which-key)",
    },
  },
}
</file>

<file path="plugin/bool-switch.lua">
local function switch_bool()
  local cursor = vim.api.nvim_win_get_cursor(0)
  local row = cursor[1] -- line number
  local word = vim.fn.expand "<cword>"
  local line = vim.api.nvim_buf_get_lines(0, row - 1, row, true)[1]
  if word == "true" then
    local index = line:find "true"
    vim.api.nvim_set_current_line(line:sub(1, index - 1) .. "false" .. line:sub(index + 4))
  elseif word == "false" then
    local index = line:find "false"
    vim.api.nvim_set_current_line(line:sub(1, index - 1) .. "true" .. line:sub(index + 5))
  end
end

vim.keymap.set("n", "<leader>bs", function()
  switch_bool()
end, { desc = "Switch boolean" })
</file>

<file path="plugin/floating-terminal.lua">
vim.keymap.set("t", "<C-q>", "<C-\\><C-n>")

local state = {
  floating = {
    buf = -1,
    win = -1,
  },
}

local function create_floating_window(opts)
  opts = opts or {}
  -- Get screen dimensions
  local screen_width = vim.api.nvim_get_option "columns"
  local screen_height = vim.api.nvim_get_option "lines"
  -- Calculate default dimensions (80% of screen)
  local default_width = math.floor(screen_width * 0.8)
  local default_height = math.floor(screen_height * 0.8)
  -- Determine window dimensions
  local win_width = opts.width or default_width
  local win_height = opts.height or default_height
  -- Calculate position to center the window
  local win_col = math.floor((screen_width - win_width) / 2)
  local win_row = math.floor((screen_height - win_height) / 2)
  -- Create a new buffer for the floating window
  local buf = nil
  if vim.api.nvim_buf_is_valid(opts.buf) then
    buf = opts.buf
  else
    buf = vim.api.nvim_create_buf(false, true)
  end
  -- Open the floating window
  local win = vim.api.nvim_open_win(buf, true, {
    relative = "editor",
    row = win_row,
    col = win_col,
    width = win_width,
    height = win_height,
    border = "rounded", -- Or any other border style you prefer
    focusable = true,
    style = "minimal",
  })

  return { win = win, buf = buf }
end

local toggle_terminal = function()
  if not vim.api.nvim_win_is_valid(state.floating.win) then
    state.floating = create_floating_window { buf = state.floating.buf }
    if vim.bo[state.floating.buf].buftype ~= "terminal" then
      vim.cmd.term()
    end
  else
    vim.api.nvim_win_hide(state.floating.win)
  end
end

vim.api.nvim_create_user_command("Floaterminal", toggle_terminal, {})
vim.keymap.set({ "n", "t" }, "<leader>tt", toggle_terminal, { desc = "Toggle floating terminal" })
</file>

<file path="plugin/tabout.lua">
local skip_closing_pairs = function()
  local cursor = vim.api.nvim_win_get_cursor(0)
  local row = cursor[1] -- line number
  local col = cursor[2] -- column number
  local line = vim.api.nvim_buf_get_lines(0, row - 1, row, true)[1]
  local closing_chars = { "]", ")", "}", '"', "'", "`", ">", ";" }
  local next_char = line:sub(col + 1, col + 1)
  for _, char in ipairs(closing_chars) do
    if next_char == char then
      vim.api.nvim_win_set_cursor(0, { row, col + 1 })
      return
    end
  end
end

vim.keymap.set("i", "<Tab>", function()
  skip_closing_pairs()
end, { silent = true })
</file>

<file path="snippets/global.lua">
local ls = require "luasnip"
local c = ls.choice_node
local t = ls.text_node
local s = ls.snippet

ls.snippets = {
  all = {
    ls.parser.parse_snippet("lf", "local $1 = function($2) \n $0\nend"),
  },
}

local function get_visual_selection()
  local mode = vim.fn.mode()
  if mode ~= "v" and mode ~= "V" and mode ~= "\22" then
    vim.notify("Not in visual mode", vim.log.levels.ERROR)
    return ""
  end

  local start_pos = vim.fn.getpos "'<"
  local end_pos = vim.fn.getpos "'>"

  -- nvim_buf_get_text uses 0-indexed positions
  local start_row, start_col = start_pos[2] - 1, start_pos[3] - 1
  local end_row, end_col = end_pos[2] - 1, end_pos[3]

  -- Get the selected text
  local lines = vim.api.nvim_buf_get_text(0, start_row, start_col, end_row, end_col, {})

  return table.concat(lines, "\n")
end

vim.keymap.set("v", "<leader>l", function()
  local text = get_visual_selection()
  vim.notify("Selected text: " .. text, vim.log.levels.INFO)
end, { noremap = true, silent = true })
</file>

<file path="snippets/lua.lua">
local ls = require "luasnip" -- LuaSnip API
local add_snippet = ls.snippet_node -- Add a snippet node
local c = ls.choice_node -- Choice node
local s = ls.snippet -- Create a snippet
local t = ls.text_node -- Plain text
local i = ls.insert_node -- Placeholder for cursor
local f = ls.function_node -- Function-generated text
local fmt = require("luasnip.extras.fmt").fmt

return {
  ls.add_snippets("lua", {
    ls.snippet("hw", {
      ls.text_node "Hello, World!",
    }),
  }),

  ls.add_snippets("lua", {
    s("todo", {
      c(1, {
        t "-- TODO: ",
        t "-- FIXME: ",
        t "-- HACK: ",
      }),
      i(0),
    }),

    s(
      "reqqq",
      fmt([[local {} = require "{}"]], {
        f(function(import_name)
          local parts = vim.split(import_name[1][1], ".", true)
          return parts[#parts] or ""
        end, { 1 }),
        i(1),
      })
    ),
  }),
}
</file>

<file path="snippets/python.lua">
-- local ls = require "luasnip"
-- local s = ls.snippet
-- local t = ls.text_node
-- local i = ls.insert_node
-- local su = require "luasnip_snippets.common.snip_utils"
-- local te = su.trig_engine
-- local nl = su.new_line
-- local d = ls.dynamic_node
-- local sn = ls.snippet_node
-- local jt = su.join_text
-- local k = require("luasnip.nodes.key_indexer").new_key
--
-- ls.add_snippets("python", {
--   s({ trig = "prf" }, {
--     t 'print(f"',
--     i(0, ""),
--     t '")',
--   }),
--   s({ trig = "cla", descr = "(cla)", priority = -1000, trigEngine = te "w" }, {
--     t "class ",
--     i(1, "class_name", { key = "i1" }),
--     t ":",
--     nl(),
--     t '\t"""',
--     i(0, "description", { key = "i0" }),
--     t '"""',
--   }),
--   s({ trig = "try", descr = '(try) "Try / Except"', priority = -50, trigEngine = te "b" }, {
--     t "try:",
--     nl(),
--     t "\t",
--     d(1, function(args, snip)
--       return sn(nil, { i(1, jt({ snip.env.LS_SELECT_DEDENT or {} }, "\t"), { key = "i1" }) })
--     end),
--     nl(),
--     t "except ",
--     i(2, "Exception", { key = "i2" }),
--     t " as ",
--     i(3, "my_exception", { key = "i3" }),
--     t ":",
--     nl(),
--     t "\t",
--     d(4, function(args, snip)
--       return sn(nil, { i(1, jt({ "raise ", args[1] }, "\t"), { key = "i4" }) })
--     end, { k "i3" }),
--   }),
-- })
</file>

<file path="snippets/react.lua">
local ls = require "luasnip"
local extras = require "luasnip.extras"
local fmt = require("luasnip.extras.fmt").fmt

local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local rep = extras.rep

-- typescriptreact(.tsx) snippets
return {
  ls.add_snippets("typescriptreact", {
    s("sfc", {
      t { "const " },
      i(1),
      t { " = () => {" },
      t { "", "  return (" },
      t { "", "    " },
      i(2, ""),
      t { "", "  );" },
      t { "", "};" },
      t { "", "", "export default " },
      rep(1),
      t { ";" },
    }),
  }),

  ls.add_snippets("typescriptreact", {
    s({ trig = "uS", snippetType = "autosnippet" }, {
      t "const [",
      i(1),
      t ", set",
      f(function(args)
        return args[1][1]:gsub("^%l", string.upper)
      end, { 1 }),
      t "] = useState(",
      i(2),
      t ");",
    }),
  }),

  ls.add_snippets("typescriptreact", {
    s({ trig = "uE", snippetType = "autosnippet" }, {
      t "useEffect(() => {",
      t { "", "  " },
      i(1),
      t { "", "}" },
      t ", [",
      i(2),
      t "]);",
    }),
  }),

  ls.add_snippets("typescriptreact", {
    s({ trig = "print", snippetType = "autosnippet" }, {
      t "console.log(",
      i(1),
      t ");",
    }),
  }),

  ls.add_snippets("typescript", {
    s({ trig = "print", snippetType = "autosnippet" }, {
      t "console.log(",
      i(1),
      t ");",
    }),
  }),

  ls.add_snippets("typescript", {
    s("nextapi", {
      t 'import { NextRequest, NextResponse } from "next/server";',
      t "\n",
      t "export async function POST(req: NextRequest) {",
      t "  try {",
      t "    const body = await req.json();",
      t "    const { ",
      i(1, "data"), -- Data variable name
    }),
  }),

  ls.add_snippets("typescript", {
    s("ctor", {
      t "constructor(",
      f(function(_, snip)
        return snip.env.LS_SELECT_RAW
      end, {}),
      t ") {\n",
      f(function(_, snip)
        local params = snip.env.LS_SELECT_RAW:split ", "
        local assignments = {}
        for _, param in ipairs(params) do
          local name = param:match "(%w+):"
          if name then
            table.insert(assignments, "    this." .. name .. " = " .. name .. ";\n")
          end
        end
        return table.concat(assignments)
      end, {}),
      t "  }\n",
    }),
  }),
}
</file>

<file path="init.lua">
require("core.options")
require("core.keymaps")
require("config.lazy")
</file>

<file path="lazy-lock.json">
{
  "CopilotChat.nvim": { "branch": "main", "commit": "16d897fd43d07e3b54478ccdb2f8a16e4df4f45a" },
  "LuaSnip": { "branch": "master", "commit": "c1851d5c519611dfc451b6582961b2602e0af89b" },
  "alpha-nvim": { "branch": "main", "commit": "de72250e054e5e691b9736ee30db72c65d560771" },
  "blink-cmp-copilot": { "branch": "main", "commit": "439cff78780c033aa23cf061d7315314b347e3c1" },
  "blink.cmp": { "branch": "main", "commit": "022521a8910a5543b0251b21c9e1a1e989745796" },
  "copilot.lua": { "branch": "master", "commit": "0929c92097a49b6ae3565aab157fa2bce398d953" },
  "everforest-nvim": { "branch": "main", "commit": "2eb7c348f880ba93de4d98cae049c9441f5d4d49" },
  "friendly-snippets": { "branch": "main", "commit": "572f5660cf05f8cd8834e096d7b4c921ba18e175" },
  "hardtime.nvim": { "branch": "main", "commit": "be3329939c14fc8a7e948eb963f632581a27ad2d" },
  "harpoon": { "branch": "harpoon2", "commit": "ed1f853847ffd04b2b61c314865665e1dadf22c7" },
  "hlchunk.nvim": { "branch": "main", "commit": "474ec5d0f220158afa83aaefab32402e710d3032" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lazydev.nvim": { "branch": "main", "commit": "2367a6c0a01eb9edb0464731cc0fb61ed9ab9d2c" },
  "lsp-progress.nvim": { "branch": "main", "commit": "f3df1df8f5ea33d082db047b5d2d2b83cc01cd8a" },
  "lualine.nvim": { "branch": "master", "commit": "15884cee63a8c205334ab13ab1c891cd4d27101a" },
  "maple.nvim": { "branch": "master", "commit": "bfe22b9d51c1a568eaf871eb1390d6a2b2125977" },
  "markview.nvim": { "branch": "main", "commit": "23f8bda5a172287c3423a3ffe7640efefa52a48b" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "2cb844268288ccc06b8d0f368ef3c2b195e8278c" },
  "mason-tool-installer.nvim": { "branch": "main", "commit": "75d60a8f928decd8b38897f80849768b7c540a5b" },
  "mason.nvim": { "branch": "main", "commit": "1aceba8bc158b5aaf90649077cad06744bc23ac4" },
  "mini.icons": { "branch": "main", "commit": "397ed3807e96b59709ef3292f0a3e253d5c1dc0a" },
  "neo-tree.nvim": { "branch": "main", "commit": "f481de16a0eb59c985abac8985e3f2e2f75b4875" },
  "noice.nvim": { "branch": "main", "commit": "0427460c2d7f673ad60eb02b35f5e9926cf67c59" },
  "nui.nvim": { "branch": "main", "commit": "f535005e6ad1016383f24e39559833759453564e" },
  "nvim-autopairs": { "branch": "master", "commit": "4d74e75913832866aa7de35e4202463ddf6efd1b" },
  "nvim-cmp": { "branch": "main", "commit": "b5311ab3ed9c846b585c0c15b7559be131ec4be9" },
  "nvim-lspconfig": { "branch": "master", "commit": "ac1dfbe3b60e5e23a2cff90e3bd6a3bc88031a57" },
  "nvim-surround": { "branch": "main", "commit": "0e62500b98f4513feaaf7425c135472457ea5b7d" },
  "nvim-treesitter": { "branch": "master", "commit": "066fd6505377e3fd4aa219e61ce94c2b8bdb0b79" },
  "nvim-treesitter-textobjects": { "branch": "master", "commit": "a91cd95f50bf991106403cb02c5851b92e45820e" },
  "nvim-ts-autotag": { "branch": "main", "commit": "a1d526af391f6aebb25a8795cbc05351ed3620b5" },
  "nvim-web-devicons": { "branch": "master", "commit": "1fb58cca9aebbc4fd32b086cb413548ce132c127" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "snacks.nvim": { "branch": "main", "commit": "bc0630e43be5699bb94dadc302c0d21615421d93" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "1f08ed60cafc8f6168b72b80be2b2ea149813e55" },
  "telescope-undo.nvim": { "branch": "main", "commit": "928d0c2dc9606e01e2cc547196f48d2eaecf58e5" },
  "telescope.nvim": { "branch": "master", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },
  "tiny-inline-diagnostic.nvim": { "branch": "main", "commit": "b6ed8038dfd256eb963a2c79cb30f0f4683551a0" },
  "todo-comments.nvim": { "branch": "main", "commit": "304a8d204ee787d2544d8bc23cd38d2f929e7cc5" },
  "typr": { "branch": "main", "commit": "ec1abe68229a0c3480ae2df51e1807fd091261ba" },
  "vim-tmux-navigator": { "branch": "master", "commit": "64803fdd19a36211eba5e39f86c4cbceae8e1d06" },
  "volt": { "branch": "main", "commit": "c45d5f48da8e802e608b5c6da471ca4d84276dfb" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
}
</file>

</files>
