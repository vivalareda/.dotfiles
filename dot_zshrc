# Determine the operating system
#
#
#
#
OS=$(uname -s)
case "$OS" in
  Linux*)
    if [ -f /etc/arch-release ]; then
      CONFIG="arch"
    elif grep -qi "ubuntu" /etc/lsb-release 2>/dev/null; then
      CONFIG="wsl"
    fi
    ;;
  Darwin*)
    CONFIG="mac"
    ;;
  *)
    ;;
esac

# Linux-specific configuration
if [[ "$CONFIG" == "arch" ]]; then
  # Display PokÃ©mon
  pokemon-colorscripts --no-title -r 1,3,6

  # Detect the AUR helper
  aurhelper=""
  if pacman -Qi yay &>/dev/null; then
    aurhelper="yay"
  elif pacman -Qi paru &>/dev/null; then
    aurhelper="paru"
  fi

  # Helper function for installing packages
  in() {
    local arch_pkgs=() aur_pkgs=()
    for pkg in "$@"; do
      if pacman -Si "$pkg" &>/dev/null; then
        arch_pkgs+=("$pkg")
      else
        aur_pkgs+=("$pkg")
      fi
    done
    [[ ${#arch_pkgs[@]} -gt 0 ]] && sudo pacman -S "${arch_pkgs[@]}"
    [[ ${#aur_pkgs[@]} -gt 0 ]] && $aurhelper -S "${aur_pkgs[@]}"
  }

  # Command not found handler
  command_not_found_handler() {
    local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
    printf 'zsh: command not found: %s\n' "$1"
    local entries=($(pacman -F --machinereadable -- "/usr/bin/$1"))
    if [[ ${#entries[@]} -gt 0 ]]; then
      echo "${bright}$1${reset} may be found in the following packages:"
      local pkg=""
      for entry in "${entries[@]}"; do
        local fields=(${(z)entry})
        if [[ "$pkg" != "${fields[2]}" ]]; then
          printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
        fi
        echo "    /${fields[4]}"
        pkg="${fields[2]}"
      done
    fi
    return 127
  }

  # Arch-specific aliases
  alias c='clear'
  alias l='eza -lh --icons=auto'
  alias ls='eza -1 --icons=auto'
  alias ll='eza -lha --icons=auto --sort=name --group-directories-first'
  alias ld='eza -lhD --icons=auto'
  alias lt='eza --icons=auto --tree'
  alias un='$aurhelper -Rns'
  alias up='$aurhelper -Syu'
  alias pl='$aurhelper -Qs'
  alias pa='$aurhelper -Ss'
  alias pc='$aurhelper -Sc'
  alias po='$aurhelper -Qtdq | $aurhelper -Rns -'
  alias github='cd ~/github'
fi

eval "$(/opt/homebrew/bin/brew shellenv)"

if [[ -f "$HOME/.cargo/env" ]]; then
  source "$HOME/.cargo/env"
fi


# WSL-specific configuration
if [[ "$CONFIG" == "wsl" ]]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Set Home config
export XDG_CONFIG_HOME="$HOME/.config"

# Make nvim default editor
export EDITOR="nvim"
export VISUAL="nvim"

# Oh-my-zsh setup
ZSH="${HOME}/.oh-my-zsh"

# Plugin setup
plugins=(git sudo zsh-256color zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting)

# Source oh-my-zsh
source $ZSH/oh-my-zsh.sh
source ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme

bindkey 'jk' autosuggest-accept
bindkey 'jj' autosuggest-execute
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg-cyan'

# Custom aliases
alias ls='eza --color=always --icons=always --long --git --no-filesize --no-user --no-permissions'
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias fzfc='code $(fzf --preview="bat --color=always {}")'
alias sz='source ~/.zshrc'
alias ez='nvim ~/.zshrc'
alias mkdir='mkdir -p'
alias nv='nvim'
alias vim='nvim'
alias nvconfig='cd ~/.config/nvim && nvim'
alias obs='cd ~/obsidian/obsidian && nvim'
alias dl='yt-dlp'

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"

# GITHUB ALIASES
alias gc='sh ~/.config/script/check-commit.sh && command git commit -m'
alias gcs='command git commit -m'
alias ga='git add .'
alias gp='git push'

# REPOMIX
alias rpm='repomix'

# Separate zoxide config
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh)"
  alias cd='z'
fi

# obsidian plugin nvim config 
if [ -f ~/.obsidian_env ]; then
  source ~/.obsidian_env
else 
	echo "obsidian path not set homie run setobspath if u wanna set it"
fi

tmux() {
  if [ $# -eq 0 ]; then
    print -n "wus the session name homie? "
    read SESSION_NAME
    command tmux new-session -A -s "$SESSION_NAME"
  else
    command tmux "$@"
  fi
}

repomix() {
  if [ $# -eq 0 ]; then
    command repomix --global
  else
    command repomix "$@"
  fi
}

gh-create() {
    VISIBILITY=$(echo -e "public\nprivate" | fzf --prompt="Select visibility: ")
    if [ ! -d ".git" ]; then
      command git init && git add . && git commit -m "initial commit"
    fi

    if [ "$VISIBILITY" = "public" ]; then
      command gh repo create --public --source=. --remote=origin && git push -u --all && gh browse
    elif [ "$VISIBILITY" = "private" ]; then
      command gh repo create --private --source=. --remote=origin && git push -u --all && gh browse
    else
      echo "wrong command"
    fi
}

git() {
    if [ "$1" = "commit" ] && [[ ! " $* " =~ " --skip " ]]; then
        ~/.config/script/check-commit.sh || return 1
    fi
    command git "$@"
}

setobspath() {
  print -n "What's the path? "
  read OBSIDIAN_PATH
  echo "export OBSIDIAN_PATH=\"$OBSIDIAN_PATH\"" > ~/.obsidian_env
  source ~/.zshrc
}

# pbcopy() {
#   if [ $# -eq 0 ]; then
#     selected_file=$(find . -maxdepth 1 -type f | fzf --prompt="Select file: ")
#     [[ -n "$selected_file" ]] && cat $selected_file | command pbcopy
#   fi
# }

# Use bat for man pages
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# Set path
export PATH="/opt/homebrew/anaconda3/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
source $HOME/.local/bin/env

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"


#fzf and yazi config
source <(fzf --zsh)
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Load p10k configuration if available
[[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]] && \
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
[ -f "$HOME/.ghcup/env" ] && . "$HOME/.ghcup/env" # ghcup-env

. "$HOME/.local/bin/env"


# Load Angular CLI autocompletion.
source <(ng completion script)
