# Get right system

OS="$(uname -s)"
case "$OS" in
  Linux*)
    if [ -f /etc/arch-release ]; then
	CONFIG="arch"
    elif [ -f /etc/lsb-release ] && grep -qi "ubuntu" /etc/lsb-release; then
	CONFIG="wsl"
    else
      echo "Unsupported Linux distro"
      exit 1
    fi
      ;;
    Darwin*)
	CONFIG="mac"
      ;;
    *)
      echo "Unsupported Linux distro"
      exit 1
      ;;
  esac

# Configuration for Linux
if [[ "$CONFIG" == 'arch' ]]; then
    #Display Pokemon
    pokemon-colorscripts --no-title -r 1,3,6

    # Helpful aliases
    alias  c='clear' # clear terminal
    alias  l='eza -lh  --icons=auto' # long list
    alias ls='eza -1   --icons=auto' # short list
    alias ll='eza -lha --icons=auto --sort=name --group-directories-first' # long list all
    alias ld='eza -lhD --icons=auto' # long list dirs
    alias lt='eza --icons=auto --tree' # list folder as tree
    alias un='$aurhelper -Rns' # uninstall package
    alias up='$aurhelper -Syu' # update system/package/aur
    alias pl='$aurhelper -Qs' # list installed package
    alias pa='$aurhelper -Ss' # list availabe package
    alias pc='$aurhelper -Sc' # remove unused cache
    alias po='$aurhelper -Qtdq | $aurhelper -Rns -' # remove unused packages, also try > $aurhelper -Qqd | $aurhelper -Rsu --print -
    alias github='cd ~/github'

    # Detect the AUR wrapper
    if pacman -Qi yay &>/dev/null ; then
        aurhelper="yay"
        elif pacman -Qi paru &>/dev/null ; then
        aurhelper="paru"
    fi

    function in {
        local -a inPkg=("$@")
        local -a arch=()
        local -a aur=()

        for pkg in "${inPkg[@]}"; do
            if pacman -Si "${pkg}" &>/dev/null ; then
                arch+=("${pkg}")
            else
                aur+=("${pkg}")
            fi
        done

        if [[ ${#arch[@]} -gt 0 ]]; then
            sudo pacman -S "${arch[@]}"
        fi

        if [[ ${#aur[@]} -gt 0 ]]; then
            ${aurhelper} -S "${aur[@]}"
        fi
    }

    # In case a command is not found, try to find the package that has it
    function command_not_found_handler {
        local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
        printf 'zsh: command not found: %s\n' "$1"
        local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
        if (( ${#entries[@]} )) ; then
            printf "${bright}$1${reset} may be found in the following packages:\n"
            local pkg
            for entry in "${entries[@]}" ; do
                local fields=( ${(0)entry} )
                if [[ "$pkg" != "${fields[2]}" ]] ; then
                    printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
                fi
                printf '    /%s\n' "${fields[4]}"
                pkg="${fields[2]}"
            done
        fi
        return 127
    }
fi

# MacOS config
if [[ "$CONFIG" == 'mac' ]]; then
    # HOME="/Users/reda"
fi
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
# ZSH=$HOME/oh-my-zsh/
ZSH="${HOME}/.oh-my-zsh"

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Load oh-my-zsh theme
source ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme
typeset -g POWERLEVEL9K_INSTANT_PROMPT=off

# List of plugins used
plugins=( git sudo zsh256-color zsh-autosuggestions zsh-syntax-highlighting zsh-interactive-cd )

#ZSH-AUTOSUGGESTIONS
bindkey 'jq' autosuggest-accept
bindkey 'jj' autosuggest-execute
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=("forward-char" "vi-forward-char")
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg-cyan'


# Handy change dir shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# custom alias
alias fzfc='code $(fzf --preview="bat --color=always {}")'
alias sz='source ~/.zshrc'
alias ez='code ~/.zshrc'

# custom commands

cheat() {
    curl cheat.sh/$1
}

# Define the resudo function to rerun the last command with sudo
redo() {
    # Get the last command from the history
    last_command=$(fc -ln -1)

    # Execute the last command with sudo
    sudo $last_command
}

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'

source <(fzf --zsh)
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

echo "zshrc loaded successfully"
